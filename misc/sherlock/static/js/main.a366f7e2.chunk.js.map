{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["AppStates","Header","VideoPlayer","props","VideoBox","key","url","title","playsInline","fluid","aspectRatio","position","src","AnswerForm","useState","inputText","setInputText","FormBox","onSubmit","e","length","window","alert","changeAppState","BadEnding","HappyEnding","type","name","onChange","target","value","EndingMessage","EndingMessageBox","formUrl","href","BG","styled","div","Box","App","Opening","appState","setAppState","state","isChrome","isBrowser","process","_currentMainComponent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w3BAOA,IAyBKA,EAzBCC,EAAS,WACb,OACE,6BACE,wFAUAC,EAAc,SAACC,GACnB,OACE,kBAACC,EAAD,CAAUC,IAAKF,EAAMG,KACnB,4BAAKH,EAAMI,OACX,kBAAC,SAAD,CAAQC,aAAW,EAACC,OAAO,EAAMC,YAAY,QAC3C,kBAAC,gBAAD,CAAeC,SAAS,WACxB,4BAAQC,IAAKT,EAAMG,U,SAMtBN,O,qBAAAA,I,6BAAAA,I,0BAAAA,M,KAUL,IAAMa,EAAa,SAACV,GAA4B,IAAD,EACXW,mBAAS,IADE,mBACtCC,EADsC,KAC3BC,EAD2B,KAsB7C,OACE,kBAACC,EAAD,KACE,+MACA,0BAAMC,SAtBW,SAACC,GACK,IAArBJ,EAAUK,OAGW,iBAAdL,EAGc,iBAAdA,EAITM,OAAOC,MAAM,0DAHbnB,EAAMoB,eAAevB,EAAUwB,WAH/BrB,EAAMoB,eAAevB,EAAUyB,aAH/BJ,OAAOC,MAAM,wEAqBX,2BAAOI,KAAK,OAAOC,KAAK,OAAOC,SARhB,SAACT,GACpBH,EAAaG,EAAEU,OAAOC,UAQlB,4BAAQJ,KAAK,UAAb,mBAUFK,EAAgB,SAAC5B,GACrB,OACE,kBAAC6B,EAAD,CAAkB3B,IAAKF,EAAM8B,SAC3B,8MACA,uBAAGC,KAAM/B,EAAM8B,SAAf,sDA4DAE,EAAKC,IAAOC,IAAV,KAOFC,EAAMF,IAAOC,IAAV,KASHjC,EAAWgC,IAAOC,IAAV,KAMRpB,EAAUmB,IAAOC,IAAV,KAIPL,EAAmBI,IAAOC,IAAV,KAMPE,EArFH,WAAO,IAAD,EACgBzB,mBAASd,EAAUwC,SADnC,mBACTC,EADS,KACCC,EADD,KAGVnB,EAAiB,SAACoB,GACtBD,EAAYC,IA4Cd,OAdMC,YAAYC,YAEZ,kBAACV,EAAD,KACE,kBAACG,EAAD,KACE,kBAAC,EAAD,MA/BoB,WAC5B,OAAQG,GACN,KAAKzC,EAAUwC,QACb,OACE,6BACE,kBAAC,EAAD,CAAalC,IAAG,UAAKwC,iBAAL,uBAAkDvC,MAAM,yFACxE,kBAAC,EAAD,CAAYgB,eAAgBA,KAGlC,KAAKvB,EAAUyB,YACb,OACE,6BACE,kBAAC,EAAD,CAAanB,IAAG,UAAKwC,iBAAL,4BAAuDvC,MAAM,uEAC7E,kBAAC,EAAD,CAAe0B,QAAQ,yCAG7B,KAAKjC,EAAUwB,UACb,OACE,6BACE,kBAAC,EAAD,CAAalB,IAAG,UAAKwC,iBAAL,0BAAqDvC,MAAM,uEAC3E,kBAAC,EAAD,CAAe0B,QAAQ,0CAYtBc,KAKA,kFC1HOC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a366f7e2.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport styled from 'styled-components';\nimport 'video-react/dist/video-react.css'; // import css\nimport { Player, BigPlayButton } from 'video-react';\nimport { isChrome, isBrowser } from 'react-device-detect';\nimport './App.css';\n\nconst Header = () => {\n  return (\n    <div>\n      <h1>~~~トモルマ氏の秘密~~~</h1>\n    </div>\n  )\n}\n\ninterface VideoPlayerProps {\n  url: string,\n  title: string\n}\n\nconst VideoPlayer = (props: VideoPlayerProps) => {\n  return (\n    <VideoBox key={props.url}>\n      <h2>{props.title}</h2>\n      <Player playsInline fluid={true} aspectRatio=\"16:9\">\n        <BigPlayButton position=\"center\" />\n        <source src={props.url} />\n      </Player>\n    </VideoBox>\n  )\n}\n\nenum AppStates {\n  Opening,\n  HappyEnding,\n  BadEnding\n}\n\ninterface AnswerFormProps {\n  changeAppState: (state: AppStates) => void\n}\n\nconst AnswerForm = (props: AnswerFormProps) => {\n  const [inputText, setInputText] = useState(\"\");\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    if (inputText.length === 0) {\n      window.alert(\"回答を入力してください\");\n      return;\n    } else if (inputText === \"意味\") {\n      props.changeAppState(AppStates.HappyEnding);\n      return;\n    } else if (inputText === \"死人\") {\n      props.changeAppState(AppStates.BadEnding);\n      return;\n    } else {\n      window.alert(\"誤答。残念だよ。。\");\n    }\n  }\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputText(e.target.value);\n  }\n\n  return (\n    <FormBox>\n      <h3>トモルマ氏の秘密「XXの溢れる社会を作りたい」XXは？ (漢字二文字)</h3>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"text\" onChange={handleChange}></input>\n        <button type=\"submit\">回答</button>\n      </form>\n    </FormBox>\n  )\n}\n\ninterface EndingMessageProps {\n  formUrl: string\n}\n\nconst EndingMessage = (props: EndingMessageProps) => {\n  return (\n    <EndingMessageBox key={props.formUrl}>\n      <h3>これで謎解きは全て終了です。以下のリンクに進んでください。</h3>\n      <a href={props.formUrl}>日程調整フォーム</a>\n    </EndingMessageBox>\n  )\n\n}\n\n\nconst App = () => {\n  const [appState, setAppState] = useState(AppStates.Opening);\n\n  const changeAppState = (state: AppStates) => {\n    setAppState(state);\n  }\n\n  const _currentMainComponent = () => {\n    switch (appState) {\n      case AppStates.Opening:\n        return (\n          <div>\n            <VideoPlayer url={`${process.env.PUBLIC_URL}/videos/opening.mp4`} title=\"シャーロックからのメッセージ\"></VideoPlayer>\n            <AnswerForm changeAppState={changeAppState}></AnswerForm>\n          </div>\n        )\n      case AppStates.HappyEnding:\n        return (\n          <div>\n            <VideoPlayer url={`${process.env.PUBLIC_URL}/videos/happy-ending.mp4`} title=\"シャーロックからのお礼\"></VideoPlayer>\n            <EndingMessage formUrl=\"https://forms.gle/ucXo9M8vQzbiEP2H6\"></EndingMessage>\n          </div>\n        )\n      case AppStates.BadEnding:\n        return (\n          <div>\n            <VideoPlayer url={`${process.env.PUBLIC_URL}/videos/bad-ending.mp4`} title=\"シャーロックからの回答\"></VideoPlayer>\n            <EndingMessage formUrl=\"https://forms.gle/PR2Em71HizodSAiKA\"></EndingMessage>\n          </div>\n        )\n    }\n  }\n\n  const currentComponent = () => {\n    if (isChrome && isBrowser) {\n      return (\n        <BG>\n          <Box>\n            <Header></Header>\n            {_currentMainComponent()}\n          </Box>\n        </BG>\n      )\n    } else {\n      return <div>Please open this page using Chrome as a browser.</div>\n    }\n  }\n\n  return currentComponent();\n}\n\n// STYLE\n\nconst BG = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #000000;\n  text-align: center;\n`\n\nconst Box = styled.div`\n  width: 60%;\n  height: 100%;\n  background-color: #868686;\n  margin: auto;\n  padding-top: 50px;\n  padding-bottom: 300px;\n`\n\nconst VideoBox = styled.div`\n  width: 80%;\n  margin: auto;\n  margin-top: 100px;\n`\n\nconst FormBox = styled.div`\n  margin-top: 100px;\n`\n\nconst EndingMessageBox = styled.div`\n  margin-top: 100px;\n`\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}